// Модуль навигации и взаимодействия с картой
window.BotNavigation = {


        /**
     * Рандомная задержка в пределах от min до max мс
     * @param {number} min - минимальная задержка
     * @param {number} max - максимальная задержка
     */
    async randomDelay(min = 100, max = 1500) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        await window.BotUtils.delay(delay);
    },

    
    /**
     * Поиск и клик по гексагону с приоритетом
     * @param {Array} priorities - массив приоритетов
     * @param {number} timeout - таймаут
     */
    async clickHexagonWithPriority(priorities, timeout = 5000) {
        const start = Date.now();

        while (Date.now() - start < timeout) {
            if (!window.BotConfig.isScriptRunning) return false;

            const aimIcon = document.querySelector('tui-icon.svg-icon[style*="aim.svg"]');
            if (aimIcon) {
                aimIcon.click();
                // Добавляем задержку после клика, чтобы карта успела обновиться
                await this.randomDelay(300, 400);
                console.log('DEBUG: Нажата кнопка прицела, ожидание отрисовки карты');
            } else {
                // Если кнопка прицела не найдена, возможно, карта еще не загружена.
                // Ожидаем появления хотя бы одного гексагона, чтобы убедиться в готовности карты.
                console.log('DEBUG: aimIcon не найден. Ожидаю появления гексагонов на карте');
                const mapReady = await window.BotUtils.waitFor(() => document.querySelector('g.hex-box'), 200, 2000);
                if (!mapReady) {
                    console.log('DEBUG: Карта не появилась вовремя, пропускаю итерацию и жду следующей');
                    await this.randomDelay(500, 1500);
                    continue;
                }
            }

            // Получаем текущий гексагон где стоит игрок
            const currentHexagon = document.querySelector('g.hex-box.current');

            let championHexes = [];
            if (window.BotConfig.attackChampionsSetting === 'Игнорировать чампов') {
                championHexes = Array.from(document.querySelectorAll('g.hex-box')).filter(hex => {
                    const useElement = hex.querySelector('use');
                    if (useElement) {
                        const href = useElement.getAttribute('href') || useElement.getAttribute('xlink:href');
                        return href === '#champion';
                    }
                    return false;
                });
                console.log(`DEBUG: [Игнорировать чампов] Найдено чемпионов: ${championHexes.length}`);
                if (championHexes.length > 0) {
                    console.log('DEBUG: Гексагоны чемпионов (первые 3):', championHexes.slice(0, 3));
                }
            }

            let foundPriorityTarget = false;

            for (const priority of priorities) {
                let hexagons = [];

                if (['champion', 'shrine', 'boss', 'chest-epic', 'chest-rare', 'chest-common'].includes(priority.type)) {
                    hexagons = Array.from(document.querySelectorAll('g.hex-box')).filter(hex => {
                        const useElement = hex.querySelector('use');
                        if (useElement) {
                            const href = useElement.getAttribute('href') || useElement.getAttribute('xlink:href');
                            if (priority.type === 'champion' && href === '#champion') return true;
                            if (priority.type === 'shrine' && href === '#shrine') return true;
                            if (priority.type === 'boss' && href === '#boss') return true;
                            if (priority.type.startsWith('chest') && href && href.includes('chest')) return true;
                        }
                        return false;
                    });
                }

                if (priority.type === 'enemies') {
                    hexagons = Array.from(document.querySelectorAll('g.hex-box')).filter(hexagon => {
                        const textElement = hexagon.querySelector('text.enemies');
                        return textElement && textElement.textContent.trim() === String(priority.value);
                    });
                }

                if (currentHexagon) {
                    hexagons = hexagons.filter(hex => hex && hex !== currentHexagon);
                }

                if (window.BotConfig.attackChampionsSetting === 'Игнорировать чампов' && championHexes.length > 0 && priority.type !== 'champion') {
                    const initialCount = hexagons.length;
                    hexagons = hexagons.filter(hex => hex && !championHexes.includes(hex));
                    console.log(`DEBUG: Приоритет ${priority.type}. Гексагонов до фильтрации чампов: ${initialCount}, после: ${hexagons.length}`);
                }

                hexagons = hexagons.filter(hex => hex.classList.contains('neighbour'));


                for (const hexagon of hexagons) {
                    if (!hexagon) continue;

                    const isTargetChampion = !!hexagon.querySelector('use[href="#champion"], use[xlink\\:href="#champion"]');
                    
                    this.clickHexagon(hexagon); // СНАЧАЛА клик
                    
                    window.BotConfig.lastClickedHexWasChampion = isTargetChampion; // ПОТОМ флаг
                    
                    console.log(`Найден гексагон по приоритету: ${priority.type}. Последний клик был по чемпиону: ${isTargetChampion}`);
                    
                    await this.randomDelay(200, 1500);
                    foundPriorityTarget = true;
                    return { found: true, type: priority.type };
                }

            }

            // Запасная логика: если не найдена ни одна приоритетная цель И мы игнорируем чемпионов
            if (!foundPriorityTarget && window.BotConfig.attackChampionsSetting === 'Игнорировать чампов') {
                const availableChampionNeighbours = Array.from(document.querySelectorAll('g.hex-box.neighbour')).filter(hex => {
                    const useElement = hex.querySelector('use');
                    if (useElement) {
                        const href = useElement.getAttribute('href') || useElement.getAttribute('xlink:href');
                        return href === '#champion';
                    }
                    return false;
                });

                if (availableChampionNeighbours.length > 0) {
                    const targetChampionHex = availableChampionNeighbours[0];
                    const isTargetChampion = true;

                    // --- НОВАЯ ЛОГИКА ПРОВЕРКИ ЗДОРОВЬЯ И ЛЕЧЕНИЯ ---
                    const healthElement = document.querySelector('app-general-stat.profile-health .stats-line');
                    if (healthElement && window.BotCombat && window.BotCombat.useHealthPotion) {
                        const healthPercentage = parseFloat(healthElement.style.transform.match(/-?\d+(\.\d+)?/)[0]);
                        // Если здоровье 70% или ниже (поскольку значение отрицательное, -30 соответствует 70%)
                        if (healthPercentage <= -30) {
                            console.log(`DEBUG: Здоровье ${-healthPercentage}% (ниже 70%). Лечусь перед входом в чемпионский гексагон.`);
                            await window.BotCombat.useHealthPotion();
                            await this.randomDelay(500, 1000); // Даем время на применение зелья
                        }
                    }
                    // --- КОНЕЦ НОВОЙ ЛОГИКИ ---

                    window.BotConfig.lastClickedHexWasChampion = isTargetChampion; // Устанавливаем флаг
                    console.log('DEBUG: Нет доступных гексагонов без чемпионов. Выбираю ближайшего чемпиона-соседа для перемещения.');
                    console.log('DEBUG: (Fallback Click) Выполняю клик по чемпионскому гексагону как запасной вариант. Последний клик был по чемпиону: true');
                    this.clickHexagon(targetChampionHex);
                    await this.randomDelay(200, 1500);
                    return { found: true, type: 'fallback-champion-escape' };
                } else {
                    console.log('DEBUG: Нет доступных гексагонов без чемпионов и нет соседних чемпионов для перемещения.');
                }
            }

            await this.randomDelay(200, 1500);
        }

        return { found: false, type: null };
    },

    /**
     * Универсальная функция клика по гексагону
     * @param {HTMLElement} hexagon - элемент гексагона
     */
    clickHexagon(hexagon) {
        const rect = hexagon.getBoundingClientRect();

        const createMouseEvent = (type) => new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: rect.left + rect.width / 2,
            clientY: rect.top + rect.height / 2
        });

        hexagon.dispatchEvent(createMouseEvent('mousedown'));
        hexagon.dispatchEvent(createMouseEvent('mouseup'));
        hexagon.dispatchEvent(createMouseEvent('click'));
    },

    /**
     * Клик по полигону гексагона
     * @param {HTMLElement} polygon - элемент полигона
     */
    clickPolygon(polygon) {
        if (!polygon) {
            console.error('❌ clickPolygon: полигон не найден');
            return false;
        }
        
        try {
            const rect = polygon.getBoundingClientRect();
            const clickEvent = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window,
                clientX: rect.left + rect.width / 2,
                clientY: rect.top + rect.height / 2
            });
            
            polygon.dispatchEvent(clickEvent);
            console.log('🖱️ Клик по полигону выполнен через MouseEvent');
            return true;
        } catch (error) {
            console.error('❌ Ошибка клика по полигону:', error);
            return false;
        }
    },

    /**
     * Получение приоритетов для поиска гексагонов
     */
    getPriorities() {
        const basePriorities = [
            { type: 'chest-epic', selector: '#chest-epic' },
            { type: 'shrine', selector: '#shrine' },
            { type: 'chest-rare', selector: '#chest-rare' },
            { type: 'chest-common', selector: '#chest-common' },
            { type: 'enemies', value: '1' },
            { type: 'enemies', value: '2' }
        ];
        
        if (window.BotConfig.attackChampionsSetting === 'Атаковать чампов') {
            return [{ type: 'champion', selector: '#champion' }, ...basePriorities];
        }
        
        return basePriorities;
    },

    /**
     * Проверка наличия алтаря или сундука на текущем гексагоне
     */
    async isSpecialHexagon() {
        const currentHexagon = document.querySelector('g.hex-box.current');
        if (!currentHexagon) return false;

        const specialEntities = Array.from(currentHexagon.querySelectorAll('use')).find(use => {
            const href = use.getAttribute('href') || use.getAttribute('xlink:href');
            return href && (href.includes('shrine') || href.includes('chest'));
        });

        return !!specialEntities;
    },

    /**
     * Проверка членов битвы и клик по карте
     */
    async checkBattleMembersAndClickMap() {
        const battleMembers = document.querySelector('div.battle-members');
        if (battleMembers && battleMembers.offsetParent !== null) {
            const mapBtn = document.querySelector('div.button-icon-content tui-icon.svg-icon[style*="map.svg"]');
            if (mapBtn) {
                mapBtn.closest('div.button-icon-content').click();
                await this.randomDelay(250, 500);
                console.log('Обнаружен экран battle-members, выполнен клик по карте');
                return true;
            }
        }
        return false;
    },

    /**
     * Переход на локацию по названию
     * @param {string} name - название локации
     * @param {AbortSignal} abortSignal - сигнал отмены
     */
    async goToLocationByName(name, abortSignal) {
        const openMap = () => {
            const mapBtn = document.querySelector('app-button-icon.button-map[data-appearance="primary"]');
            if (mapBtn) mapBtn.click();
        };
        
        openMap();
        
        await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('goToLocationByName aborted');
            return Array.from(document.querySelectorAll('.location-list-item, .location-item, .location-name'))
                .find(el => el.textContent && el.textContent.includes(name));
        }, 100, 10000);
        
        const locBtn = Array.from(document.querySelectorAll('.location-list-item, .location-item, .location-name'))
            .find(el => el.textContent && el.textContent.includes(name));
        
        if (locBtn) locBtn.click();
        
        await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('goToLocationByName aborted');
            const header = document.querySelector('.location-header, .location-title');
            return header && header.textContent && header.textContent.includes(name);
        }, 200, 10000);
    },

    /**
     * Переход к полигону по координатам
     * @param {string} points - координаты полигона
     * @param {AbortSignal} abortSignal - сигнал отмены
     */
    async stepToPolygonByPoints(points, abortSignal) {
        const polygon = await window.BotUtils.waitFor(() => {
            if (abortSignal && abortSignal.aborted) throw new Error('stepToPolygonByPoints aborted');
            return Array.from(document.querySelectorAll('polygon.hexagon'))
                .find(p => p.getAttribute('points') === points);
        }, 200, 10000);
        
        if (polygon) {
            console.log('✅ Полигон найден, выполняю клик');
            
            try {
                const rect = polygon.getBoundingClientRect();
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window,
                    clientX: rect.left + rect.width / 2,
                    clientY: rect.top + rect.height / 2
                });
                
                polygon.dispatchEvent(clickEvent);
                console.log('🖱️ Клик по полигону выполнен через MouseEvent');
                return true;
            } catch (error) {
                console.error('❌ Ошибка клика по полигону:', error);
                return false;
            }
        } else {
            console.error('❌ Полигон не найден по координатам');
            return false;
        }
    },

    /**
     * Проверка и возврат в город при смерти
     */
    async checkAndReturnToCity() {
        try {
            const cityButton = Array.from(document.querySelectorAll('div.button-content'))
                .find(btn => btn.textContent.trim() === 'В город');
            
            if (cityButton) {
                console.log('Найдена кнопка "В город", выполняем нажатие');
                cityButton.click();
                await this.randomDelay(120, 200);
                
                console.log('Ищем кнопку "Воскреснуть"');
                const resurrectButton = await window.BotUtils.waitForElement('div.button-content', 'Воскреснуть', 3000);
                if (resurrectButton) {
                    console.log('✅ Найдена кнопка "Воскреснуть", нажимаем');
                    resurrectButton.click();
                    await this.randomDelay(120, 200);
                } else {
                    console.log('⚠️ Кнопка "Воскреснуть" не найдена или уже воскрешен');
                }
                
                await this.randomDelay(1000, 1500);
                
                if (window.BotInventory && window.BotInventory.claimRewardButton) {
                    await window.BotInventory.claimRewardButton();
                }

                window.BotConfig.deaths++;
                if (window.BotStatistics) {
                    window.BotStatistics.addDeaths();
                }
                console.log(`Смерть зафиксирована. Всего смертей: ${window.BotConfig.deaths}`);

                await window.BotUtils.clickByTextContent('Сражения');
                await this.randomDelay(120, 200);
                await window.BotUtils.clickByLocationName(window.BotConfig.selectedLocation);
                await this.randomDelay(120, 200);
            }
        } catch (error) {
            console.error('Ошибка в функции checkAndReturnToCity:', error);
        }
    }
};
