// Модуль боевой системы
window.BotCombat = {
    async useSkill(skill) {
        const skillButton = document.querySelector(`div.action-image[style*="${skill}"]`)
        if (skillButton) {
            skillButton.click()
            await window.BotUtils.delay(100)
        }
    },

    /**
     * Рандомная задержка в пределах от min до max мс
     * @param {number} min - минимальная задержка
     * @param {number} max - максимальная задержка
     */
    async randomDelay(min = 100, max = 1500) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min
        await window.BotUtils.delay(delay)
    },
    
    /**
     * Использование скиллов в зависимости от класса
     * Если выбран лучник и настройка "Игнорировать чампов" активна,
     * то пропускаем мультискилл лучника.
     */
    async useSkills() {
        const skills = window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]
        if (!skills) return

        if (skills.attack && skills.attack.length) {
            for (const skill of skills.attack) {
                // Если выбран лучник и настройка "Игнорировать чампов" активна,
                // И бой ИДЕТ НА ЧЕМПИОНСКОМ ГЕКСАГОНЕ (по флагу lastClickedHexWasChampion),
                // И текущий скилл - это мультискилл лучника, то пропускаем его.
                if (window.BotConfig.selectedClass === 'Лучник' && 
                    window.BotConfig.attackChampionsSetting === 'Игнорировать чампов' &&
                    window.BotConfig.lastClickedHexWasChampion && 
                    skill === window.BotConfig.CLASS_SKILLS['Лучник'].multitarget) {
                    console.log('DEBUG: Пропускаю мультискилл лучника, так как настроено игнорирование чемпионов и бой идет на чемпионском гексагоне')
                    continue
                }

                await this.useSkill(skill)
                await window.BotUtils.delay(100)
            }
        }
    },

    async checkManaAndHealth() {
        // Проверка здоровья
        const healthElement = document.querySelector('app-general-stat.profile-health .stats-line')
        if (healthElement) {
            const healthPercentage = parseFloat(healthElement.style.transform.match(/-?\d+(\.\d+)?/)[0])
            if (healthPercentage <= -20) {
                console.log('DEBUG: Здоровье ниже 80%. Использую зелье здоровья.')
                await this.useHealthPotion()
                await window.BotUtils.delay(100)
                
                if (window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.heal) {
                    console.log(`DEBUG: Здоровье ниже 80%. Использую скилл лечения: ${window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].heal}`)
                    await this.useSkill(window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].heal)
                    await window.BotUtils.delay(100)
                }
            }
        }

        // Проверка маны
        if (window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.attack || 
            window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.heal || 
            window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]?.buff) {
            const manaElement = document.querySelector('app-general-stat.profile-mana .stats-line-mana')
            if (manaElement) {
                const manaPercentage = parseFloat(manaElement.style.transform.match(/-?\d+(\.\d+)?/)[0])
                if (manaPercentage <= -50) {
                    console.log('DEBUG: Мана ниже 50%. Использую зелье маны.')
                    await this.useManaPotion()
                    await window.BotUtils.delay(100)
                }
            }
        }
    },

    async waitAndUseSkill(skillKey, maxWaitMs = 6000, checkIntervalMs = 500) {
        const start = Date.now()
        while (Date.now() - start < maxWaitMs) {
            try {
                const result = await this.useSkill(skillKey)
                if (result) {
                    // скилл применён успешно
                    return true
                }
                // если useSkill возвращает false при кулдауне, ждем
            } catch (e) {
                // если useSkill кидает ошибку при кулдауне — игнорируем и ждём
            }
            await window.BotUtils.delay(checkIntervalMs)
        }
        console.log(`⚠️ Не удалось применить скилл ${skillKey} за ${maxWaitMs} мс`)
        return false
    },


    async useHealthPotion() {
        const healthPotionButtons = ['potion-health-epic', 'potion-health-rare', 'potion-health-common']
        
        for (const potion of healthPotionButtons) {
            const potionButton = document.querySelector(`app-action-button .action-image[style*="${potion}"]`)
            if (potionButton) {
                potionButton.click()
                await window.BotUtils.delay(100)
                return true
            }
        }
        return false
    },

    async useManaPotion() {
        const manaPotionButtons = ['potion-mana-epic', 'potion-mana-rare', 'potion-mana-common']
        
        for (const potion of manaPotionButtons) {
            const potionButton = document.querySelector(`app-action-button .action-image[style*="${potion}"]`)
            if (potionButton) {
                potionButton.click()
                await window.BotUtils.delay(100)
                return true
            }
        }
        return false
    },

    /**
     * Проверка и активация баффов
     */
    async checkAndActivateDefenseBuff() {
        const skills = window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass]
        if (!skills || !skills.buff) return
        
        try {
            // Для лучника проверяем оба баффа
            if (window.BotConfig.selectedClass === 'Лучник') {
                // Проверяем первый бафф (увеличение магического урона)
                const magicDamageBuff = document.querySelector('tui-icon.svg-icon[style*="magicGearDamageArcher.svg"]')
                if (!magicDamageBuff && skills.buff[0]) {
                    console.log(`🛡️ Активирую бафф лучника (магический урон): ${skills.buff[0].skill}`)
                    await this.useSkill(skills.buff[0].skill)
                    await window.BotUtils.delay(300)
                }
                
                // Проверяем второй бафф (увеличение уклонения)
                const evasionBuff = document.querySelector('tui-icon.svg-icon[style*="upEvasionArcher.svg"]')
                if (!evasionBuff && skills.buff[1]) {
                    console.log(`🛡️ Активирую бафф лучника (уклонение): ${skills.buff[1].skill}`)
                    await this.useSkill(skills.buff[1].skill)
                    await window.BotUtils.delay(300)
                }
            } 
            // Для воина оставляем старую логику
            else if (window.BotConfig.selectedClass === 'Воин') {
                const defenseIcon = document.querySelector('tui-icon.svg-icon[style*="upDefenseWarrior.svg"]')
                if (!defenseIcon && skills.buff) {
                    console.log(`🛡️ Активирую бафф воина (защита): ${skills.buff}`)
                    await this.useSkill(skills.buff)
                    await window.BotUtils.delay(100)
                }
            }
            // else if (window.BotConfig.selectedClass === 'Маг') {
            //     const resistDamageBuff = document.querySelector('tui-icon.svg-icon[style*="upResistanceMage.svg"]');
            //     if (!resistDamageBuff && skills.buff[0]) {
            //         await this.useSkill(skills.buff[0].skill);
            //         await window.BotUtils.delay(300);
            //     }
            //         
            //     const DefenceevasionBuff = document.querySelector('tui-icon.svg-icon[style*="upDefenseMage.svg"]');
            //     if (!DefenceevasionBuff && skills.buff[1]) {
            //         await this.useSkill(skills.buff[1].skill);
            //         await window.BotUtils.delay(300);
            //     }

            //     const hpevasionBuff = document.querySelector('tui-icon.svg-icon[style*="upHealthRegenMage.svg"]');
            //     if (!hpevasionBuff && skills.buff[1]) {
            //         await this.useSkill(skills.buff[1].skill);
            //         await window.BotUtils.delay(300);
            //     }
            // }
        } catch(error) {
            console.error('Ошибка при активации баффа:', error)
        }
    },

    // НОВАЯ ФУНКЦИЯ: Ожидание появления врага в бою
    async waitForEnemy(timeout = 7000) {
        const start = Date.now()
        while (Date.now() - start < timeout) {
            if (!window.BotConfig.isScriptRunning) return false

            const enemyIcon = document.querySelector('app-icon.profile-class tui-icon[style*="mob-class-"]')
            if (enemyIcon) {
                await this.randomDelay(100, 400)
                return true
            }

            await this.randomDelay(100, 400)
        }
        return false
    },

    

    // ОБНОВЛЕННАЯ ФУНКЦИЯ: Основной цикл боя (fightEnemies)
    async fightEnemies(isChampionHexagon = false) { // isChampionHexagon теперь может использоваться как hint
        // Проверяем текущий гексагон заново, независимо от аргумента
        const currentHexagon = document.querySelector('g.hex-box.current')
        let isCurrentHexChampion = false
        if (currentHexagon) {
            const useElement = currentHexagon.querySelector('use')
            if (useElement) {
                const href = useElement.getAttribute('href') || useElement.getAttribute('xlink:href')
                if (href === '#champion') {
                    isCurrentHexChampion = true
                }
            }
        }
        
        // Устанавливаем флаг в BotConfig, который будет использоваться в useSkills
        window.BotConfig.lastClickedHexWasChampion = isCurrentHexChampion

        // Если в настройках запрещено бить чемпионов
        if (isCurrentHexChampion && window.BotConfig.attackChampionsSetting === 'Игнорировать чампов') {
            console.log(`🛑 Бой с чемпионом обнаружен, но настроено игнорирование. Отменяю бой.`)
            // Здесь может потребоваться логика выхода из боя или ожидания, если бой уже начался
            // Например, можно попытаться кликнуть по карте, чтобы выйти
            await window.BotNavigation.checkBattleMembersAndClickMap()
            return
        }
    
        console.log(`⚔️ Начинаю бой (чемпион на гексагоне: ${isCurrentHexChampion})`)
    
        window.BotConfig.vipStatus = window.BotUtils.autoDetectVipStatus()
        window.BotConfig.selectedClass = window.BotUtils.detectPlayerClass()
    
        let initialEnemyCount = 0
        // Убедимся, что интерфейс боя открыт
        await window.BotNavigation.checkBattleMembersAndClickMap()
    
        const enemiesCountElement = document.querySelector('div.battle-bar-enemies-value')
        if (enemiesCountElement) {
            initialEnemyCount = parseInt(enemiesCountElement.textContent.trim(), 10) || 0
            console.log(`👹 Количество врагов: ${initialEnemyCount}`)
        }
        
        try {
            // Логика использования мультискилла лучника или мага при входе в бой (первый ход)
            // Она была у вас внизу, я ее переместил сюда, чтобы она выполнялась один раз в начале боя
            if (window.BotConfig.selectedClass === 'Лучник') {
                if (initialEnemyCount >= 2 || isCurrentHexChampion) {
                    console.log(`🏹 Использую мультискилл лучника`)
                    await waitAndUseSkill.call(this, window.BotConfig.CLASS_SKILLS['Лучник'].multitarget)
                }
            } else if (window.BotConfig.selectedClass === 'Маг') { // Для мага тоже мультискилл
                if (initialEnemyCount >= 2 || isCurrentHexChampion) {
                    console.log(`🏹 Использую мультискилл мага`)
                    await this.useSkill(window.BotConfig.CLASS_SKILLS['Маг'].multitarget)
                    await window.BotUtils.delay(100)
                }
            }

            // Использование скилла против чемпиона, если класс Лучник
            if (isCurrentHexChampion && window.BotConfig.selectedClass === 'Лучник' && 
                window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].championSkill) {
                console.log(`👑 Использую скилл против чемпиона`)
                await this.useSkill(window.BotConfig.CLASS_SKILLS[window.BotConfig.selectedClass].championSkill)
                await window.BotUtils.delay(1500)
            }
        
            console.log(`🎯 Начинаю основной цикл боя (VIP: ${window.BotConfig.vipStatus})`)
            let fightRounds = 0
        
            while (window.BotConfig.isScriptRunning) {
                fightRounds++
        
                // Проверка на кнопку "Забрать награду" (бой завершен)
                const rewardButton = document.querySelector('div.button-content[data-appearance="primary"]')
                if (rewardButton && rewardButton.textContent.trim().includes('Забрать награду')) {
                    console.log('✅ Бой завершен, забираю награду')
                    rewardButton.click()
                    await window.BotUtils.delay(1000)
                    if (window.BotInventory && window.BotInventory.claimRewardButton) {
                        await window.BotInventory.claimRewardButton()
                    }
                    break
                }
                
                // Проверка на кнопку "В город" (смерть)
                const cityButton = Array.from(document.querySelectorAll('div.button-content'))
                    .find(btn => btn.textContent.trim() === 'В город')
                if (cityButton) {
                    console.log('💀 Обнаружена смерть, возвращаюсь в город')
                    await window.BotNavigation.checkAndReturnToCity()
                    break
                }
        
                // Логика переключения целей для не-VIP (ваша существующая)
                if (window.BotConfig.vipStatus === 'Не VIP') {
                    const enemiesCountElementCurrent = document.querySelector('div.battle-bar-enemies-value')
                    if (enemiesCountElementCurrent && enemiesCountElementCurrent.textContent.trim() === '0') {
                        console.log(`✅ Все враги побеждены (счетчик: 0)`)
                        break
                    }
        
                    let needSwitch = false
                    const enemyCard = document.querySelector('app-profile-card.target')
                    if (enemyCard) {
                        const hpText = enemyCard.querySelector('.profile-health .stats-text')
                        if (hpText) {
                            const hpMatch = hpText.textContent.trim().match(/^(\d+)\s*\/\s*[\d, ]+$/)
                            if (hpMatch && parseInt(hpMatch[1], 10) === 0) {
                                needSwitch = true
                            }
                        }
                        const deadIcon = enemyCard.querySelector('tui-icon.svg-icon[style*="dead.svg"]')
                        if (deadIcon) {
                            needSwitch = true
                        }
                    }
        
                    if ((!enemyCard || needSwitch)) {
                        const switchBtn = document.querySelector('div.button-icon-content tui-icon.svg-icon[style*="switch.svg"]')
                        if (switchBtn) {
                            console.log('DEBUG: Переключаюсь на следующую цель')
                            switchBtn.closest('div.button-icon-content').click()
                            await window.BotUtils.delay(300)
                            continue
                        } else {
                            console.log(`⚠️ Кнопка переключения не найдена`)
                            await window.BotUtils.delay(300)
                            continue
                        }
                    }
                }
        
                // Проверка, есть ли еще враги (финальная проверка после всех действий)
                const enemyIcon = document.querySelector('app-icon.profile-class tui-icon[style*="mob-class-"]')
                if (!enemyIcon) {
                    console.log(`✅ Враг не найден, бой завершен`)
                    break
                }
        
                // Проверка здоровья и маны, активация баффов и использование скиллов
                await this.checkManaAndHealth()
                await window.BotUtils.delay(100)
        
                await this.checkAndActivateDefenseBuff()
                await window.BotUtils.delay(100)
        
                await this.useSkills()
                await window.BotUtils.delay(100)
        
                if (fightRounds > 100) {
                    console.log(`⚠️ Слишком много раундов боя (${fightRounds}), принудительно завершаю`)
                    break
                }
            }
        
            console.log(`🎉 Бой завершен после ${fightRounds} раундов`)
        
            if (window.BotStatistics) {
                window.BotStatistics.addMobsKilled(initialEnemyCount)
                if (isCurrentHexChampion) { // Используем фактическое состояние гексагона
                    window.BotStatistics.addChampionsKilled()
                }
            }
        
            const isSpecial = await window.BotNavigation.isSpecialHexagon()
            if (isSpecial) {
                console.log(`🎁 Специальный гексагон, жду 5 секунд`)
                await window.BotUtils.delay(5000)
            }
        
            await window.BotUtils.delay(500)
            const battleMembersAfter = document.querySelector('div.battle-members')
            if (battleMembersAfter && battleMembersAfter.offsetParent !== null) {
                console.log('⚠️ Интерфейс боя все еще активен после завершения, пытаюсь закрыть вручную')
                await window.BotNavigation.checkBattleMembersAndClickMap()
            }
        } finally {
            // Сбрасываем флаг после завершения боя (успешного или с ошибкой)
            window.BotConfig.lastClickedHexWasChampion = false
            console.log('DEBUG: Флаг lastClickedHexWasChampion сброшен после боя')
        }
    },
    

};